install.packages("dismo")
We don't need to understand the next lines of code that much, but they are important for our statistics.  They let us know if the maps we make are accurate.
```{r}
colnames(locations_sloths_dislike) = c('lon', 'lat')
group <- kfold(locations_sloths_dislike, 5)
locations_sloth_dislikes_train <- locations_sloths_dislike[group != 1, ]
locations_sloth_dislikes_test <- locations_sloths_dislike[group == 1, ]
```
### Maxent
Now, we make our predictive maps using the modeling software called `Maxent`
This part might take a little while, so be patient : )
```{r}
maxent()
# jar <- paste(system.file(package="dismo"), "/java/maxent.jar", sep='')
maxent_results <- maxent(stacked_climate_data, locations_sloths_like_train)
plot(maxent_results)
```
See the graph above. It says that Bio 7 and bio 12 were really important for predicting where the sloth would live. We can look up online what Bio 7 and 12 are.  Maybe they are temporature and precipitation.
#### Making our maps
There are a few important statistics that tell us if our ecological model is very good.  When we get the maps, the left map is really key. Anywhere we see green, we have a really good chance of seeing sloths.
```{r}
e <- evaluate(locations_sloths_like_test, locations_sloth_dislikes_test, maxent_results, stacked_climate_data)
e
px <- predict(stacked_climate_data, maxent_results, ext=extent_of_our_map, progress='')
par(mfrow=c(1,2))
plot(px, main='Maxent, raw values')
plot(wrld_simpl, add=TRUE, border='dark grey')
tr <- threshold(e, 'spec_sens')
plot(px > tr, main='presence/absence')
plot(wrld_simpl, add=TRUE, border='dark grey')
points(locations_sloths_like_train, pch='+')
```
Those maps are cool right?? For statistics, click on the tile that says *R Console* it will show you a value for AUC. The closer to 1, the better. 0 means our maps are pretty bad, 1 means they're amazing and .5 is in the middle of course. How did we do?
# install.packages(c('raster', 'rgdal', 'dismo','rJava','maptools'))
# install.packages("rJava")
# dyn.load('/Library/Java/JavaVirtualMachines/jdk1.8.0_60.jdk/Contents/Home/jre/lib/server/libjvm.dylib')
library(dismo) # This line of code loads the dismo package
file <- paste(system.file(package="dismo"), "/ex/bradypus.csv", sep="") # This line of code loads a whole Excel database that contains GPS points for the sloth.
sloth_data <- read.table(file,  header=TRUE,  sep=",") # This line of code turns our excel spreadsheet into a table that R can read.
sloth_data <- sloth_data[,2:3] # This line of code tells R to keep only the latitude and longitude for the slots
link_to_find_climate_data <- file.path(system.file(package="dismo"), 'ex') # This line of code tells R where we stored out climate data.
climate_files <- list.files(link_to_find_climate_data, pattern='grd$', full.names=TRUE )
climate_files # here we see that R found many files related to global climate on the computer.
stacked_climate_data <- stack(climate_files)
stacked_climate_data
names(stacked_climate_data)
plot(stacked_climate_data)
plot(stacked_climate_data, 1)
set.seed(0) # This is a funny line of R code, but we need it to make sure our results of the same every time we run this code.
group <- kfold(sloth_data, 5)
locations_sloths_like_train <- sloth_data[group != 1, ]
locations_sloths_like_test <- sloth_data[group == 1, ]
extent_of_our_map <- extent(-90, -32, -33, 23) # this is the GPS range for our whole map.
stacked_climate_data <- dropLayer(stacked_climate_data, 'biome') # get rid of one piece of climate data that is tough to work with
locations_sloths_dislike <- randomPoints(stacked_climate_data, n=1000, ext=extent_of_our_map, extf = 1.25) # This line of code gather data on the climate that the sloth DOES NOT like very much.
colnames(locations_sloths_dislike) = c('lon', 'lat')
group <- kfold(locations_sloths_dislike, 5)
locations_sloth_dislikes_train <- locations_sloths_dislike[group != 1, ]
locations_sloth_dislikes_test <- locations_sloths_dislike[group == 1, ]
maxent()
maxent()
# install.packages(c('raster', 'rgdal', 'dismo','rJava','maptools'))
# install.packages("rJava")
# dyn.load('/Library/Java/JavaVirtualMachines/jdk1.8.0_60.jdk/Contents/Home/jre/lib/server/libjvm.dylib')
library(dismo) # This line of code loads the dismo package
file <- paste(system.file(package="dismo"), "/ex/bradypus.csv", sep="") # This line of code loads a whole Excel database that contains GPS points for the sloth.
sloth_data <- read.table(file,  header=TRUE,  sep=",") # This line of code turns our excel spreadsheet into a table that R can read.
sloth_data <- sloth_data[,2:3] # This line of code tells R to keep only the latitude and longitude for the slots
link_to_find_climate_data <- file.path(system.file(package="dismo"), 'ex') # This line of code tells R where we stored out climate data.
climate_files <- list.files(link_to_find_climate_data, pattern='grd$', full.names=TRUE )
climate_files # here we see that R found many files related to global climate on the computer.
stacked_climate_data <- stack(climate_files)
stacked_climate_data
names(stacked_climate_data)
plot(stacked_climate_data)
plot(stacked_climate_data, 1)
set.seed(0) # This is a funny line of R code, but we need it to make sure our results of the same every time we run this code.
group <- kfold(sloth_data, 5)
locations_sloths_like_train <- sloth_data[group != 1, ]
locations_sloths_like_test <- sloth_data[group == 1, ]
extent_of_our_map <- extent(-90, -32, -33, 23) # this is the GPS range for our whole map.
stacked_climate_data <- dropLayer(stacked_climate_data, 'biome') # get rid of one piece of climate data that is tough to work with
locations_sloths_dislike <- randomPoints(stacked_climate_data, n=1000, ext=extent_of_our_map, extf = 1.25) # This line of code gather data on the climate that the sloth DOES NOT like very much.
colnames(locations_sloths_dislike) = c('lon', 'lat')
group <- kfold(locations_sloths_dislike, 5)
locations_sloth_dislikes_train <- locations_sloths_dislike[group != 1, ]
locations_sloth_dislikes_test <- locations_sloths_dislike[group == 1, ]
maxent()
# install.packages(c('raster', 'rgdal', 'dismo','rJava','maptools'))
# install.packages("rJava")
# dyn.load('/Library/Java/JavaVirtualMachines/jdk1.8.0_60.jdk/Contents/Home/jre/lib/server/libjvm.dylib')
library(dismo) # This line of code loads the dismo package
file <- paste(system.file(package="dismo"), "/ex/bradypus.csv", sep="") # This line of code loads a whole Excel database that contains GPS points for the sloth.
sloth_data <- read.table(file,  header=TRUE,  sep=",") # This line of code turns our excel spreadsheet into a table that R can read.
sloth_data <- sloth_data[,2:3] # This line of code tells R to keep only the latitude and longitude for the slots
link_to_find_climate_data <- file.path(system.file(package="dismo"), 'ex') # This line of code tells R where we stored out climate data.
climate_files <- list.files(link_to_find_climate_data, pattern='grd$', full.names=TRUE )
climate_files # here we see that R found many files related to global climate on the computer.
stacked_climate_data <- stack(climate_files)
stacked_climate_data
names(stacked_climate_data)
plot(stacked_climate_data)
plot(stacked_climate_data, 1)
set.seed(0) # This is a funny line of R code, but we need it to make sure our results of the same every time we run this code.
group <- kfold(sloth_data, 5)
locations_sloths_like_train <- sloth_data[group != 1, ]
locations_sloths_like_test <- sloth_data[group == 1, ]
extent_of_our_map <- extent(-90, -32, -33, 23) # this is the GPS range for our whole map.
stacked_climate_data <- dropLayer(stacked_climate_data, 'biome') # get rid of one piece of climate data that is tough to work with
locations_sloths_dislike <- randomPoints(stacked_climate_data, n=1000, ext=extent_of_our_map, extf = 1.25) # This line of code gather data on the climate that the sloth DOES NOT like very much.
colnames(locations_sloths_dislike) = c('lon', 'lat')
group <- kfold(locations_sloths_dislike, 5)
locations_sloth_dislikes_train <- locations_sloths_dislike[group != 1, ]
locations_sloth_dislikes_test <- locations_sloths_dislike[group == 1, ]
maxent()
maxent()
maxent()
# install.packages(c('raster', 'rgdal', 'dismo','rJava','maptools'))
# install.packages("rJava")
# dyn.load('/Library/Java/JavaVirtualMachines/jdk1.8.0_60.jdk/Contents/Home/jre/lib/server/libjvm.dylib')
library(dismo) # This line of code loads the dismo package
file <- paste(system.file(package="dismo"), "/ex/bradypus.csv", sep="") # This line of code loads a whole Excel database that contains GPS points for the sloth.
sloth_data <- read.table(file,  header=TRUE,  sep=",") # This line of code turns our excel spreadsheet into a table that R can read.
sloth_data <- sloth_data[,2:3] # This line of code tells R to keep only the latitude and longitude for the slots
link_to_find_climate_data <- file.path(system.file(package="dismo"), 'ex') # This line of code tells R where we stored out climate data.
climate_files <- list.files(link_to_find_climate_data, pattern='grd$', full.names=TRUE )
climate_files # here we see that R found many files related to global climate on the computer.
stacked_climate_data <- stack(climate_files)
stacked_climate_data
names(stacked_climate_data)
plot(stacked_climate_data)
plot(stacked_climate_data, 1)
set.seed(0) # This is a funny line of R code, but we need it to make sure our results of the same every time we run this code.
group <- kfold(sloth_data, 5)
locations_sloths_like_train <- sloth_data[group != 1, ]
locations_sloths_like_test <- sloth_data[group == 1, ]
extent_of_our_map <- extent(-90, -32, -33, 23) # this is the GPS range for our whole map.
stacked_climate_data <- dropLayer(stacked_climate_data, 'biome') # get rid of one piece of climate data that is tough to work with
locations_sloths_dislike <- randomPoints(stacked_climate_data, n=1000, ext=extent_of_our_map, extf = 1.25) # This line of code gather data on the climate that the sloth DOES NOT like very much.
colnames(locations_sloths_dislike) = c('lon', 'lat')
group <- kfold(locations_sloths_dislike, 5)
locations_sloth_dislikes_train <- locations_sloths_dislike[group != 1, ]
locations_sloth_dislikes_test <- locations_sloths_dislike[group == 1, ]
maxent()
# install.packages(c('raster', 'rgdal', 'dismo','rJava','maptools'))
# install.packages("rJava")
# dyn.load('/Library/Java/JavaVirtualMachines/jdk1.8.0_60.jdk/Contents/Home/jre/lib/server/libjvm.dylib')
library(dismo) # This line of code loads the dismo package
file <- paste(system.file(package="dismo"), "/ex/bradypus.csv", sep="") # This line of code loads a whole Excel database that contains GPS points for the sloth.
sloth_data <- read.table(file,  header=TRUE,  sep=",") # This line of code turns our excel spreadsheet into a table that R can read.
sloth_data <- sloth_data[,2:3] # This line of code tells R to keep only the latitude and longitude for the slots
link_to_find_climate_data <- file.path(system.file(package="dismo"), 'ex') # This line of code tells R where we stored out climate data.
climate_files <- list.files(link_to_find_climate_data, pattern='grd$', full.names=TRUE )
climate_files # here we see that R found many files related to global climate on the computer.
stacked_climate_data <- stack(climate_files)
stacked_climate_data
names(stacked_climate_data)
plot(stacked_climate_data)
plot(stacked_climate_data, 1)
set.seed(0) # This is a funny line of R code, but we need it to make sure our results of the same every time we run this code.
group <- kfold(sloth_data, 5)
locations_sloths_like_train <- sloth_data[group != 1, ]
locations_sloths_like_test <- sloth_data[group == 1, ]
extent_of_our_map <- extent(-90, -32, -33, 23) # this is the GPS range for our whole map.
stacked_climate_data <- dropLayer(stacked_climate_data, 'biome') # get rid of one piece of climate data that is tough to work with
locations_sloths_dislike <- randomPoints(stacked_climate_data, n=1000, ext=extent_of_our_map, extf = 1.25) # This line of code gather data on the climate that the sloth DOES NOT like very much.
colnames(locations_sloths_dislike) = c('lon', 'lat')
group <- kfold(locations_sloths_dislike, 5)
locations_sloth_dislikes_train <- locations_sloths_dislike[group != 1, ]
locations_sloth_dislikes_test <- locations_sloths_dislike[group == 1, ]
# maxent()
# jar <- paste(system.file(package="dismo"), "/java/maxent.jar", sep='')
# maxent_results <- maxent(stacked_climate_data, locations_sloths_like_train)
# plot(maxent_results)
e <- evaluate(locations_sloths_like_test, locations_sloth_dislikes_test, maxent_results, stacked_climate_data)
e <- evaluate(locations_sloths_like_test, locations_sloth_dislikes_test, maxent_results, stacked_climate_data)
#e <- evaluate(locations_sloths_like_test, locations_sloth_dislikes_test, maxent_results, stacked_climate_data)
#e
px <- predict(stacked_climate_data, maxent_results, ext=extent_of_our_map, progress='')
library(Rcpp)
maxent()
maxent()
